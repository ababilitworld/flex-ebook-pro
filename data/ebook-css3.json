[
  {
    "id": "0",
    "title": "Mastering CSS3: From Zero to Hero",
    "details": "Complete guide to modern CSS, from fundamentals to advanced layout techniques and best practices.",
    "parent": "0",
    "children": ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
    "example": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/CSS3_logo_and_wordmark.svg/363px-CSS3_logo_and_wordmark.svg.png"
  },
  {
    "id": "1",
    "title": "CSS Foundations",
    "details": "Understanding the core syntax and mechanics of how CSS works.",
    "parent": "0",
    "children": ["1.1", "1.2", "1.3", "1.4", "1.5"]
  },
  {
    "id": "1.1",
    "title": "Syntax & Selectors",
    "details": "1. Structure: selector { property: value; }<br>2. Basic Selectors: element (p), class (.class), id (#id)<br>3. Grouping: h1, h2, p {}<br>4. The Universal Selector: * {}",
    "parent": "1",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16483/css%20syntax%20-%20selector.png"
  },
  {
    "id": "1.2",
    "title": "The Cascade, Specificity, and Inheritance",
    "details": "1. Cascade: Order of rules matters.<br>2. Specificity: How browsers decide which rule applies. (Inline > ID > Class > Element)<br>3. Inheritance: Some properties (e.g., color, font) inherit from parent elements.",
    "parent": "1",
    "children": [],
    "example": "https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity/specificity-calculation.png"
  },
  {
    "id": "1.3",
    "title": "The Box Model",
    "details": "1. Core Concept: content + padding + border + margin = total size.<br>2. box-sizing: border-box; (includes padding & border in width/height).<br>3. box-sizing: content-box; (default).",
    "parent": "1",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16558/box-model.png"
  },
  {
    "id": "1.4",
    "title": "Units of Measurement",
    "details": "1. Absolute: px (pixels), pt (points).<br>2. Relative: % (percentage), em (relative to parent font-size), rem (relative to root html font-size), vw/vh (viewport width/height).",
    "parent": "1",
    "children": []
  },
  {
    "id": "1.5",
    "title": "Basic Typography",
    "details": "1. font-family: Define typefaces.<br>2. font-size: Control text size.<br>3. font-weight: Control boldness (100-900, normal, bold).<br>4. color: Set text color.",
    "parent": "1",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16042/typography.png"
  },
  {
    "id": "2",
    "title": "Layout Fundamentals",
    "details": "Traditional CSS layout techniques that are still essential.",
    "parent": "0",
    "children": ["2.1", "2.2", "2.3", "2.4"]
  },
  {
    "id": "2.1",
    "title": "Display Property",
    "details": "1. display: block; (e.g., div, p - takes full width).<br>2. display: inline; (e.g., span - flows like text).<br>3. display: inline-block; (inline flow, but accepts box model properties).<br>4. display: none; (hides element)",
    "parent": "2",
    "children": []
  },
  {
    "id": "2.2",
    "title": "Positioning",
    "details": "1. position: static; (default, normal flow).<br>2. position: relative; (offset relative to itself).<br>3. position: absolute; (offset relative to nearest positioned ancestor).<br>4. position: fixed; (offset relative to viewport).<br>5. position: sticky; (toggles between relative and fixed).",
    "parent": "2",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/15614/positioning.png"
  },
  {
    "id": "2.3",
    "title": "Floats & Clear",
    "details": "1. float: left/right; (pushes element to side, content wraps around).<br>2. clear: both/left/right; (ensures element is below floated elements).",
    "parent": "2",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/17574/floats.png"
  },
  {
    "id": "2.4",
    "title": "Centering Techniques",
    "details": "1. Text: text-align: center;<br>2. Block: margin: 0 auto;<br>3. Modern: Flexbox or Grid (see sections 3 & 4).",
    "parent": "2",
    "children": []
  },
  {
    "id": "3",
    "title": "Flexbox",
    "details": "Modern one-dimensional layout model for arranging items in rows or columns.",
    "parent": "0",
    "children": ["3.1", "3.2", "3.3", "3.4", "3.5"]
  },
  {
    "id": "3.1",
    "title": "Flex Container Basics",
    "details": "1. display: flex; (activates flexbox).<br>2. flex-direction: row / column (main axis).<br>3. flex-wrap: wrap / nowrap (single or multiple lines).<br>4. justify-content: (align on main axis: flex-start, center, space-between, space-around).<br>5. align-items: (align on cross axis: stretch, flex-start, center, baseline).",
    "parent": "3",
    "children": [],
    "example": "https://css-tricks.com/wp-content/uploads/2018/10/01-container.svg"
  },
  {
    "id": "3.2",
    "title": "Aligning Content & Items",
    "details": "1. align-content: (aligns flex lines: space-between, center, stretch). Use when there are multiple lines.<br>2. align-items: (aligns items on the cross axis for a single line).",
    "parent": "3",
    "children": [],
    "example": "https://css-tricks.com/wp-content/uploads/2018/10/align-content.svg"
  },
  {
    "id": "3.3",
    "title": "Flex Item Properties",
    "details": "1. flex-grow: (ability to grow if extra space is available).<br>2. flex-shrink: (ability to shrink if necessary).<br>3. flex-basis: (default size of an item before remaining space is distributed).<br>4. flex: shorthand (grow shrink basis).<br>5. align-self: (overrides align-items for individual item).",
    "parent": "3",
    "children": [],
    "example": "https://css-tricks.com/wp-content/uploads/2018/10/flex-items.svg"
  },
  {
    "id": "3.4",
    "title": "Practical Flexbox Examples",
    "details": "1. Navigation bars.<br>2. Card layouts with equal heights.<br>3. Vertical and horizontal centering.<br>4. Sticky footers.",
    "parent": "3",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16046/flexbox-example1.png"
  },
  {
    "id": "3.5",
    "title": "Common Flexbox Pitfalls",
    "details": "1. Forgetting to set a width/flex-basis on items.<br>2. Margin collapse doesn't happen in flexbox.<br>3. Using fixed widths that break the flex model.",
    "parent": "3",
    "children": []
  },
  {
    "id": "4",
    "title": "CSS Grid",
    "details": "Powerful two-dimensional layout system for designing complex web layouts.",
    "parent": "0",
    "children": ["4.1", "4.2", "4.3", "4.4", "4.5"]
  },
  {
    "id": "4.1",
    "title": "Grid Container Basics",
    "details": "1. display: grid; or display: inline-grid;<br>2. grid-template-columns: Define column tracks (e.g., 1fr 1fr 1fr, 200px auto, repeat(3, 1fr)).<br>3. grid-template-rows: Define row tracks.<br>4. gap: (grid-gap) - Sets spacing between grid items.",
    "parent": "4",
    "children": [],
    "example": "https://css-tricks.com/wp-content/uploads/2018/11/dddgrid-template-columns-rows-01.svg"
  },
  {
    "id": "4.2",
    "title": "Grid Template Areas",
    "details": "1. grid-template-areas: Visual way to define layout.<br>2. Assign names to areas: \"header header header\" \"sidebar main main\".<br>3. Use grid-area on items to place them.",
    "parent": "4",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16053/grid-template-areas.png"
  },
  {
    "id": "4.3",
    "title": "Placing Grid Items",
    "details": "1. grid-column: start / end; (e.g., 1 / 3 or span 2).<br>2. grid-row: start / end;<br>3. Use grid-line numbers or named lines.",
    "parent": "4",
    "children": [],
    "example": "https://css-tricks.com/wp-content/uploads/2018/11/template-columns-rows-02.svg"
  },
  {
    "id": "4.4",
    "title": "Alignment in Grid",
    "details": "1. justify-items / justify-content: Align items on the row (inline) axis.<br>2. align-items / align-content: Align items on the column (block) axis.<br>3. place-items: shorthand (align justify).",
    "parent": "4",
    "children": [],
    "example": "https://css-tricks.com/wp-content/uploads/2018/11/align-justify-content-01.svg"
  },
  {
    "id": "4.5",
    "title": "Practical Grid Examples",
    "details": "1. Holy Grail Layout (header, footer, sidebar, main).<br>2. Magazine-style/image gallery layouts.<br>3. Overlapping content.",
    "parent": "4",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16059/grid-layout.png"
  },
  {
    "id": "5",
    "title": "Responsive Design",
    "details": "Techniques to make websites look great on all devices.",
    "parent": "0",
    "children": ["5.1", "5.2", "5.3", "5.4"]
  },
  {
    "id": "5.1",
    "title": "Viewport Meta Tag",
    "details": "1. Essential for mobile: <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">.<br>2. Tells the browser to match the screen's width.",
    "parent": "5",
    "children": []
  },
  {
    "id": "5.2",
    "title": "Media Queries",
    "details": "1. @media (max-width: 768px) { ... } (styles for screens smaller than 768px).<br>2. @media (min-width: 769px) { ... } (styles for larger screens).<br>3. Use breakpoints based on content, not specific devices.",
    "parent": "5",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16714/media-query.png"
  },
  {
    "id": "5.3",
    "title": "Responsive Units & Strategies",
    "details": "1. Use relative units (%, rem, vw/vh) over fixed px.<br>2. Flexbox and Grid are inherently responsive.<br>3. Mobile-First: Write base styles for mobile, then use min-width media queries for larger screens.",
    "parent": "5",
    "children": []
  },
  {
    "id": "5.4",
    "title": "Responsive Images",
    "details": "1. img { max-width: 100%; height: auto; } (prevents images from overflowing container).<br>2. HTML srcset & sizes attributes for serving different image files.<br>3. picture element for art direction.",
    "parent": "5",
    "children": []
  },
  {
    "id": "6",
    "title": "Styling & Effects",
    "details": "Enhancing the visual design with modern CSS properties.",
    "parent": "0",
    "children": ["6.1", "6.2", "6.3", "6.4", "6.5"]
  },
  {
    "id": "6.1",
    "title": "Advanced Backgrounds",
    "details": "1. background-size: cover / contain;<br>2. background-position: center;<br>3. Multiple backgrounds: background: url(image1.png), url(image2.png);<br>4. Linear & Radial Gradients: background: linear-gradient(to right, red, blue);",
    "parent": "6",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/5707/background.png"
  },
  {
    "id": "6.2",
    "title": "Borders & Border-Radius",
    "details": "1. border: 1px solid #ccc; (width style color).<br>2. border-radius: 10px; (rounded corners).<br>3. border-radius: 50%; (creates a circle).",
    "parent": "6",
    "children": []
  },
  {
    "id": "6.3",
    "title": "Shadows (Box & Text)",
    "details": "1. box-shadow: 5px 5px 15px rgba(0,0,0,0.3); (offset-x | offset-y | blur-radius | color).<br>2. text-shadow: 2px 2px 4px #000; (similar syntax).<br>3. Inset shadows for depressed effects.",
    "parent": "6",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16067/box-shadow.png"
  },
  {
    "id": "6.4",
    "title": "Transitions",
    "details": "1. transition: property duration timing-function delay;<br>2. transition: all 0.3s ease-in-out; (common shorthand).<br>3. Define the state change on hover/focus/active.",
    "parent": "6",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16069/transition.png"
  },
  {
    "id": "6.5",
    "title": "Transformations",
    "details": "1. transform: translate(50px, 20px); (move element).<br>2. transform: rotate(45deg);<br>3. transform: scale(1.2); (enlarge).<br>4. transform: skew(10deg);",
    "parent": "6",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16068/transform.png"
  },
  {
    "id": "7",
    "title": "Advanced Concepts & Best Practices",
    "details": "Professional techniques for robust and maintainable CSS.",
    "parent": "0",
    "children": ["7.1", "7.2", "7.3", "7.4"]
  },
  {
    "id": "7.1",
    "title": "Custom Properties (CSS Variables)",
    "details": "1. Define: --main-color: #ff0000; (usually in :root selector).<br>2. Use: color: var(--main-color);<br>3. Allows for dynamic theme switching with JavaScript.",
    "parent": "7",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16070/css-variables.png"
  },
  {
    "id": "7.2",
    "title": "Methodologies (BEM)",
    "details": "1. BEM: Block__Element--Modifier.<br>2. .card {} (Block)<br>3. .card__title {} (Element)<br>4. .card--featured {} (Modifier)<br>5. Creates self-documenting, low-specificity code.",
    "parent": "7",
    "children": [],
    "example": "https://en.bem.info/S3hTKiL4qIusLleeLqLwfAceab8.png"
  },
  {
    "id": "7.3",
    "title": "Preprocessors (Sass/SCSS)",
    "details": "1. Variables: $primary-color: #333;<br>2. Nesting: nav { ul { ... } }<br>3. Mixins: Reusable code snippets.<br>4. Must be compiled to CSS.",
    "parent": "7",
    "children": []
  },
  {
    "id": "7.4",
    "title": "Browser Support & Prefixes",
    "details": "1. Check caniuse.com for property support.<br>2. Use Autoprefixer (PostCSS) to automatically add vendor prefixes (-webkit-, -moz-, -ms-).",
    "parent": "7",
    "children": []
  },
  {
    "id": "8",
    "title": "Common Components & Patterns",
    "details": "Ready-to-use CSS for frequent UI elements.",
    "parent": "0",
    "children": ["8.1", "8.2", "8.3", "8.4"]
  },
  {
    "id": "8.1",
    "title": "Navigation Bars",
    "details": "1. Use flexbox or grid for layout.<br>2. Style list items and anchors.<br>3. Create dropdowns with :hover and absolute positioning.",
    "parent": "8",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16071/navbar.png"
  },
  {
    "id": "8.2",
    "title": "Cards",
    "details": "1. Container with border, border-radius, and box-shadow.<br>2. Consistent padding and margin.<br>3. Image on top, content below.",
    "parent": "8",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16072/card.png"
  },
  {
    "id": "8.3",
    "title": "Buttons",
    "details": "1. Reset default styles: border: none; background.<br>2. Add padding for clickable area.<br>3. Use :hover and :active states for feedback.",
    "parent": "8",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16073/buttons.png"
  },
  {
    "id": "8.4",
    "title": "Forms",
    "details": "1. Style inputs, textareas, labels.<br>2. Use :focus state for accessibility.<br>3. Layout with flexbox/grid.",
    "parent": "8",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16074/form.png"
  },
  {
    "id": "9",
    "title": "Animation & Interactivity",
    "details": "Creating dynamic and engaging user experiences.",
    "parent": "0",
    "children": ["9.1", "9.2", "9.3"]
  },
  {
    "id": "9.1",
    "title": "Keyframe Animations",
    "details": "1. @keyframes myAnimation { from { ... } to { ... } }<br>2. Apply with animation: myAnimation 2s infinite;<br>3. Control with animation-direction, animation-fill-mode, etc.",
    "parent": "9",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16076/keyframes.png"
  },
  {
    "id": "9.2",
    "title": "Hover Effects",
    "details": "1. a:hover { color: red; }<br>2. Combine with transitions for smooth changes.<br>3. Use transform: scale() or translateY() for modern effects.",
    "parent": "9",
    "children": []
  },
  {
    "id": "9.3",
    "title": "Filter Effects",
    "details": "1. filter: blur(5px);<br>2. filter: grayscale(100%);<br>3. filter: brightness(150%);<br>4. filter: drop-shadow(...); (similar to box-shadow but on content shape).",
    "parent": "9",
    "children": [],
    "example": "https://mdn.mozillademos.org/files/16075/filter.png"
  }
]